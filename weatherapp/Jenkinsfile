pipeline {
    agent {
        label("Dev")
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }
    stages {
        stage('Test auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    id
                    cd weatherapp/auth/src/main
                    go build 
                    cd -
                    ls -la
                '''
            }
        }

        stage('Test UI') {
            agent {
                docker {
                    image 'node:17'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/UI
                    npm run
                '''
            }
        }

        stage('Test weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/weather
                    pip3 install -r requirements.txt
                '''
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Login to Docker Registry') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Dockerhub', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    script {
                        def dockerHubCredentials = "${DOCKERHUB_USERNAME}:${DOCKERHUB_PASSWORD}"
                        sh "echo ${dockerHubCredentials} | docker login --username ${DOCKERHUB_USERNAME} --password-stdin"
                    }
                }
            }
        }



        stage('Build auth') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/auth
                    docker build -t nebstephy/weatherapp-auth:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push auth') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-auth:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build UI') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/UI
                    docker build -t nebstephy/weatherapp-ui:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push UI') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-ui:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build Weather') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/weather
                    docker build -t nebstephy/weatherapp-weather:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push weather') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-weather:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build Redis') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/redis
                    docker build -t nebstephy/weatherapp-redis:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push redis') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-redis:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build db') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/db
                    docker build -t nebstephy/weatherapp-db:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push db') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-db:${BUILD_NUMBER}
                '''
            }
        }

        stage('warning') {
            agent {
                label "Dev"
            }
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                script {
                    notifyUpgrade(currentBuild.currentResult, "WARNING")
                    sleep(time: env.WARNTIME, unit: "MINUTES")
                }
            }
        }
    }
}
