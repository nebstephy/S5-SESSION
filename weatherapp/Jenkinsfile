pipeline {
    agent {
        label("Dev")
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('DockerHub')
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }
    
    stages {
        stage('Test auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    id
                    cd weatherapp/auth/src/main
                    go build 
                    cd -
                    ls -la
                '''
            }
        }

        stage('Test UI') {
            agent {
                docker {
                    image 'node:17'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/UI
                    npm run
                '''
            }
        }

        stage('Test weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/weather
                    pip3 install -r requirements.txt
                '''
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        // stage("Quality Gate") {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }

        stage('Login to Docker') {
            steps {
                script {
                    // Docker login
                    withCredentials([usernamePassword(credentialsId: 'DockerHub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    }

                }
            }

        }
        
        stage('Build auth') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/auth
                    docker build -t nebstephy/weatherapp-auth:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push auth') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-auth:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build UI') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/UI
                    docker build -t nebstephy/weatherapp-ui:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push UI') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-ui:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build Weather') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/weather
                    docker build -t nebstephy/weatherapp-weather:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push weather') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-weather:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build Redis') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/redis
                    docker build -t nebstephy/weatherapp-redis:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push redis') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-redis:${BUILD_NUMBER}
                '''
            }
        }

        stage('Build db') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/db
                    docker build -t nebstephy/weatherapp-db:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Push db') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker push nebstephy/weatherapp-db:${BUILD_NUMBER}
                '''
            }
        }

        // Add more build and push stages for other services as needed...

        // stage('warning') {
        //     agent {
        //         label "Dev"
        //     }
        //     when {
        //         expression {
        //             env.GIT_BRANCH == 'origin/develop'
        //         }
        //     }
        //     steps {
        //         script {
        //             notifyUpgrade(currentBuild.currentResult, "WARNING")
        //             sleep(time: env.WARNTIME, unit: "MINUTES")
        //         }
        //     }
        // }

    
        stage('Generate-compose') {
            agent {
                label "Dev"
            }
            when {
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'WEATHERAPP_MYSQL_ROOT_PASSWORD', variable: 'WEATHERAPP_MYSQL_ROOT_PASSWORD'),
                        string(credentialsId: 'WEATHERAPP_REDIS_PASSWORD', variable: 'WEATHERAPP_REDIS_PASSWORD'),
                        string(credentialsId: 'WEATHERAPP_DB_PASSWORD', variable: 'WEATHERAPP_DB_PASSWORD'),
                        string(credentialsId: 'WEATHERAPP_APIKEY', variable: 'WEATHERAPP_APIKEY')
                    ]) {
                        sh '''
cat <<EOF > docker-compose.yml
version: '3.5'
services:
  db:
    container_name: weatherapp-db
    image: nebstephy/weatherapp-db:${BUILD_NUMBER}
    environment:
      MYSQL_ROOT_PASSWORD: ${WEATHERAPP_MYSQL_ROOT_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql
    networks:   
      - weatherapp
    restart: always
  
  redis:
    container_name: weatherapp-redis
    image: nebstephy/weatherapp-redis:${BUILD_NUMBER}
    networks:
      - weatherapp
    environment:
      REDIS_USER: redis
      REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: always

  weather:
    container_name: weatherapp-weather
    image: nebstephy/weatherapp-weather:${BUILD_NUMBER}
    expose:
      - 5000
    environment:
      APIKEY: ${WEATHERAPP_APIKEY}
    networks:
      - weatherapp
    restart: always
    depends_on:
      - db
      - redis

  auth:
    container_name: weatherapp-auth
    image: nebstephy/weatherapp-auth:${BUILD_NUMBER}
    environment:
      DB_HOST: db
      DB_PASSWORD: ${WEATHERAPP_DB_PASSWORD}
    expose:
      - 8084
    networks:
      - weatherapp
    restart: always
    depends_on:
      - weather

  ui:
    container_name: weatherapp-ui
    image: nebstephy/weatherapp-ui:${BUILD_NUMBER}
    environment:
      AUTH_HOST: auth
      AUTH_PORT: 8084
      WEATHER_HOST: weather
      WEATHER_PORT: 5000
      REDIS_USER: redis
      REDIS_PASSWORD: ${WEATHERAPP_REDIS_PASSWORD}
    expose:
      - 3000
    ports:
      - 3000:3000
    networks:
      - weatherapp
    restart: always
    depends_on:
      - auth

networks:
  weatherapp:

volumes:
  db-data:
  redis-data:
EOF
                    '''
                }
            }
        }
    }


        

        stage('Deploy') {
            agent { 
                label "Dev"
            }
            when{ 
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker-compose down --remove-orphans || true
                    docker-compose up -d 
                    docker-compose ps 
                '''
            }
        }
        // stage('entry') {
        //     agent { 
        //         label "Dev"
        //     }
        //     when{ 
        //         expression {
        //             env.GIT_BRANCH == 'origin/develop'
        //         }
        //     }
        //     steps {
        //         sh '''
        //             bash weatherapp/entry.sh
        //         '''
        //     }
        // }

        stage('checking deployment') {
            agent { 
                label "Dev"
            }
            when{ 
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    bash weatherapp/check.sh
                '''
            }
        }

        stage('checking website') {
            agent { 
                label "Dev"
            }
            when{ 
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    sleep 10
                    bash weatherapp/check-login.sh
                '''
            }
        }



    }
}
    post {
        always {
            script {
                notifyUpgrade(currentBuild.currentResult, "POST")
            }
        }
    }
    def notifyUpgrade(String buildResult, String whereAt) {
  if (Please_leave_this_section_as_it_is == 'origin/develop') {
    channel = 'jenkins-project-'
  } else {
    channel = 'jenkins-project-'
  }
  if (buildResult == "SUCCESS") {
    switch(whereAt) {
      case 'WARNING':
        slackSend(channel: channel,
                color: "#439FE0",
                message: "The_weather_app_S5: Upgrade starting in ${env.WARNTIME} minutes @ ${env.BUILD_URL}  Application The_weather_app_S5")
        break
    case 'STARTING':
      slackSend(channel: channel,
                color: "good",
                message: "The_weather_app_S5: Starting upgrade @ ${env.BUILD_URL} Application The_weather_app_S5")
      break
    default:
        slackSend(channel: channel,
                color: "good",
                message: "The_weather_app_S5: Upgrade completed successfully @ ${env.BUILD_URL}  Application The_weather_app_S5")
        break
    }
  } else {
    slackSend(channel: channel,
              color: "danger",
              message: "The_weather_app_S5: Upgrade was not successful. Please investigate it immediately.  @ ${env.BUILD_URL}  Application The_weather_app_S5")
  }
}
