pipeline {
    agent {
        label("Dev")
    }
    environment {
        DOCKERHUB_CREDENTIALS_USR = credentials('DOCKERHUB_USERNAME')
        DOCKERHUB_CREDENTIALS_PSW = credentials('DOCKERHUB_PASSWORD')
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }
    
    stages {
        stage('Test auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    id
                    cd weatherapp/auth/src/main
                    go build 
                    cd -
                    ls -la
                '''
            }
        }

        stage('Test UI') {
            agent {
                docker {
                    image 'node:17'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/UI
                    npm run
                '''
            }
        }

        stage('Test weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/weather
                    pip3 install -r requirements.txt
                '''
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:4.7.0'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build and Push Auth Image') {
            steps {
                withCredentials([string(credentialsId: 'DOCKERHUB_CREDENTIALS_USR', variable: 'DOCKERHUB_USERNAME'),
                                 string(credentialsId: 'DOCKERHUB_CREDENTIALS_PSW', variable: 'DOCKERHUB_PASSWORD')]) {
                    dir('weatherapp/auth/src/main') {
                        sh "docker build -t nebstephy/weatherapp-auth ."
                        sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                        sh "docker push nebstephy/weatherapp-auth"
                    }
                }
            }
        }

        stage('Build and Push UI Image') {
            steps {
                withCredentials([string(credentialsId: 'DOCKERHUB_CREDENTIALS_USR', variable: 'DOCKERHUB_USERNAME'),
                                 string(credentialsId: 'DOCKERHUB_CREDENTIALS_PSW', variable: 'DOCKERHUB_PASSWORD')]) {
                    dir('weatherapp/UI') {
                        sh "docker build -t nebstephy/weatherapp-ui ."
                        sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                        sh "docker push nebstephy/weatherapp-ui"
                    }
                }
            }
        }
    }
}
